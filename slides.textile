code-engine: sh

author: Colin MacDonald
email: colin@bluegraybox.com
title: Chicken n' Egg
footer: 
subfooter: 
{% css %}
.syntaxhighlighter {
    padding: 0.2em 0 0.2em 1em;
    margin: 0 0 0 0 !important;
    width: 100%;
}
.syntaxhighlighter table td.code .line {
    padding: 0 0 0 0 !important;
}
.code {
    background-color: #DDDDDD;
    padding: 1px;
}
.slide h1 {
    text-align: left;
    color: #FF6633;
}
.codeurl {
    color: grey;
    font-style: italic;
}
body {
    color: grey;
}
small {
    color: lightgrey;
}
.author {
    color: grey;
    font-style: italic;
    margin-top: 6em;
}
table.author td {
    padding-left: 4em;
}
table.author td:first-child {
    padding-left: 0;
}
li.none {
    list-style-type: none;
}
a:link, a:visited {
    color: grey;
    text-decoration: none;
}
.credit, .credit a, .aside {
    color: #888;
}
.credit, .credit a {
    font-size: medium;
}
.error {
    color: red;
}
.bullets.code ul li {
    text-align: left;
    padding: 10px 25px;
}
{% end %}


h1. Amateur Erlang

_am·a·teur noun \ˈa-mə-(ˌ)tər, -ˌtu̇r, -ˌtyu̇r, -ˌchu̇r, -chər\_

# devotee, admirer
# one who engages in a pursuit, study, science, or sport as a pastime rather than as a profession

p=(credit). "From Merriam Webster":http://www.merriam-webster.com/dictionary/amateur


!SLIDE

p=. !img/escargot.jpg(escargot)!

p=(credit). "Image by Flavio Ensiki":http://www.flickr.com/photos/flavouz/4364129769/


!SLIDE

p=. !img/bowling.jpg(bowling)!

p=(credit). "Image by Heisenberg Media":http://www.flickr.com/photos/heisenbergmedia/8429677728/


h1. Bowling Elegantly

{% code lang=erlang line_numbers=false %}
score(Rolls) -> frame(Rolls, 1, 0).

 %% Game complete.
frame(_BonusRolls, 11, Score) -> Score;

 %% Strike.
frame([10|Rest], Frame, Score) ->
    frame(Rest, Frame + 1, Score + 10 + strike_bonus(Rest));

 %% Spare.
frame([First,Second|Rest], Frame, Score) when (First + Second == 10) ->
    frame(Rest, Frame + 1, Score + 10 + spare_bonus(Rest));

 %% Normal.
frame([First,Second|Rest], Frame, Score) ->
    frame(Rest, Frame + 1, Score + First + Second).

 %% spare & strike bonus calculations.
spare_bonus([First|_Rest]) -> First.
strike_bonus([First,Second|_Rest]) -> First + Second.
{% end %}


!SLIDE

p=. !img/splashdown.jpg(Apollo 11)!

p=(credit). "Image by NASA":http://www.flickr.com/photos/penmachine/3738747586/


!SLIDE

p=. !img/crowd.jpg(crowd)!

p=(credit). "Image by James Cridland":http://www.flickr.com/photos/jamescridland/613445810/


!SLIDE

p=. !img/ideas.jpg(ideas)!

p=(credit). "Image by Khalid Albaih":http://www.flickr.com/photos/khalidalbaih/5134654297/


h1. Syntax

{% code line_numbers=false %}
-module(my_module).

my_func([]) ->
    Value = get_default_value(),          % comma
    Response = case other_func(Value) of
        ok -> "We're good!";              % semicolon
        _ -> "Oh noes!"                   % nothing!
    end,                                  % comma
    {Response, Value};                    % semicolon
my_func([Value]) ->
    {"We're good!", Value};               % semicolon
my_func(Values) ->
    IncDbl = fun (X) ->
        Inc = X + 1,                      % comma
        Inc * 2                           % nothing!
    end,                                  % comma
    Value = lists:map(IncDbl, Values),    % comma
    {"We're good!", Value}.               % period
{% end %}


h1. Recursion


h1. Recursion
{% code lang=erlang line_numbers=false %}
% Need to put a space before comments, or Slideshow treats them as its own comments
 %% beginning
func(Input) ->
    Output = [],
    func(Input, Output).
{% end %}


h1. Recursion
{% code lang=erlang line_numbers=false %}
 %% beginning
func(Input) ->
    Output = [],
    func(Input, Output).

 %% end
func([], Output) -> lists:reverse(Output).
{% end %}


h1. Recursion
{% code lang=erlang line_numbers=false %}
 %% beginning
func(Input) ->
    Output = [],
    func(Input, Output).

 %% end
func([], Output) -> lists:reverse(Output).

 %% middle
func([First | Rest], Output) ->
    NewFirst = munge(First),
    func(Rest, [NewFirst | Output]);
{% end %}


h1. Recursion

{% code lang=erlang line_numbers=false %}
lists:map(fun my_module:munge/1, Input)
{% end %}


h1. More OO than OO

p=. !img/more_human.jpg(ideas)!

p=(credit). "Image by Mark Hillary":http://www.flickr.com/photos/markhillary/4054661757/


h1. More OO than OO

{% code lang=erlang line_numbers=false %}
loop(State) ->
    receive Message ->
        NewState = handle_message(Message, State),
        loop(NewState)
    end.
{% end %}


h1. More OO than OO

{% code lang=erlang line_numbers=false %}
loop(Id) ->
    receive
        {FromPid, next} ->
            NewId = Id + 1,
            FromPid ! NewId,
            loop(NewId)
    end.
{% end %}


h1. More OO than OO

{% code lang=erlang line_numbers=false %}
loop(Id) ->
    receive
        {FromPid, next} ->
            NewId = Id + 1,
            FromPid ! NewId,
            loop(NewId)
    end.

init() ->
    Pid = spawn(fun() -> loop(0) end),
    Pid ! {self(), next},
    Id = receive Resp -> Resp end.
{% end %}


h1. More OO than OO

{% code lang=erlang line_numbers=false %}
1> file:open("test.txt", [write]).
{ok,<0.35.0>}
{% end %}


h1. More OO than OO

h2. gen_server, gen_event, gen_fsm, ...


!SLIDE

p=. !img/blacksmith.jpg(blacksmith)!

p=(credit). "Image by Derek Key":http://www.flickr.com/photos/derekskey/5249580870/


h1. Scripting

{% code lang=erlang line_numbers=false %}
#!/usr/local/bin/escript

main(Args) ->
    io:format("Hello world!~n\t~p~n", [Args]).
{% end %}


h1. Scripting

{% code lang=erlang line_numbers=false %}
 #!/usr/local/bin/escript
 %%! -sname my_script
{% end %}


h1. Scripting

{% code lang=erlang line_numbers=false %}
#!/usr/local/bin/escript

main([Url]) ->
    inets:start(),
    {ok, {{_Proto, Code, _Desc}, _Hdr, Content}} = httpc:request(Url),
    io:format("Response (~p):~n~s~n", [Code, Content]).
{% end %}


h1. Testing Tools

p=. !img/oscilloscope.jpg(testing)!

p=(credit). "Image by Audin Malmin":http://www.flickr.com/photos/audin/2418185852/


h1. Web Service Fakery

{% code lang=erlang line_numbers=false %}
-module(my_web_service).
-behaviour(spooky).
-export([init/1, get/2]).

init([])-> [{port, 8000}].

get(Req, []) ->
    Req:ok("Default response");
 %% http://localhost:8000/path/to/resource
get(Req, ["path", "to", "resource"]) ->
    Req:ok("Canned response for resource");
get(Req, ["path", "to", "other-resource"]) ->
    Req:ok("Canned response for other resource");
get(Req, ["path", "to", SomethingElse]) ->
    Req:ok(io_lib:format("Canned response for ~p", [SomethingElse])).
{% end %}


h1. Web Apps
* Spooky
* ChicagoBoss
* WebMachine


h1. Contributing

p=. !img/maintenance.jpg(contributing)!

p=(credit). "Image by US Navy":http://www.flickr.com/photos/usnavy/5863636901/


h1. Documentation

p=. !img/documents.jpg(documents)!

p=(credit). "Image by Toms Bauģis":http://www.flickr.com/photos/toms/94441116/


h1. Adventure Awaits!

p=. !img/rafting.jpg(adventure)!

p=(credit). "Image by Chris Bartle":http://www.flickr.com/photos/13963375@N00/138745886/


h1(author). Colin MacDonald
* "colin@bluegraybox.com":mailto:colin@bluegraybox.com<br>
* "http://bluegraybox.com/blog/":http://bluegraybox.com/blog/<br>
* "http://github.com/bluegraybox":http://github.com/bluegraybox<br>
